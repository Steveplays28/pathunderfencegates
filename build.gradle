//file:noinspection GroovyAccessibility
//file:noinspection GroovyAssignabilityCheck

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

version = "${project.mod_version}+mc${project.supported_minecraft_version}"
group = project.maven_group

def loadProperties() {
    def versionPropertiesFolder = project.version_properties_folder
    def defaultMinecraftVersion = project.default_minecraft_version
    def minecraftVersions = fileTree(versionPropertiesFolder).files.name
    def minecraftVersion = ""

    for (int i = 0; i < minecraftVersions.size(); i++) {
        // Remove the ".properties" at the end of the filename to get the versions
        minecraftVersions[i] = minecraftVersions[i].replaceAll("\\.properties", "")
    }

    // Sort the version list so the list goes from oldest to newest
    minecraftVersions.sort()

    int minecraftVersionIndex = -1
    println "Available Minecraft versions: ${minecraftVersions}"

    if (hasProperty("minecraft_version_properties")) {
        minecraftVersion = minecraft_version_properties
        minecraftVersionIndex = minecraftVersions.indexOf(minecraftVersion)
    }

    if (minecraftVersionIndex == -1) {
        println "minecraft_version_properties is unset or invalid! Defaulting to ${defaultMinecraftVersion}."
        println "Tip: use -Pminecraft_version_properties=\"${defaultMinecraftVersion}\" as a command line argument to set minecraft_version_properties."

        minecraftVersion = defaultMinecraftVersion
        minecraftVersionIndex = minecraftVersions.indexOf(defaultMinecraftVersion)

        assert minecraftVersionIndex != -1
    }

    println "Loading ${versionPropertiesFolder}/${minecraftVersion}.properties"
    def props = new Properties()
    props.load(new FileInputStream("${rootDir}/${versionPropertiesFolder}/${minecraftVersion}.properties"))

    props.each { prop -> gradle.ext.set(prop.key, prop.value) }
    gradle.ext.minecraft_versions = minecraftVersions
}

/**
 * Creates the list of preprocessors to use.
 *
 * @param minecraftVersions Array of all Minecraft versions.
 * @param minecraftVersionIndex Array index of the currently active Minecraft version.
 */
def writeManifoldPreprocessorDefinesToBuildProperties() {
    def versionPropertiesFolder = project.version_properties_folder
    def minecraftVersions = fileTree(versionPropertiesFolder).files.name

    for (int i = 0; i < minecraftVersions.size(); i++) {
        // Remove the ".properties" at the end of the filename to get the versions
        minecraftVersions[i] = minecraftVersions[i].replaceAll("\\.properties", "")
    }

    // Sort the version list so the list goes from oldest to newest
    minecraftVersions.sort()

    def minecraftVersion = minecraft_version_properties
    def minecraftVersionIndex = minecraftVersions.indexOf(minecraftVersion)
    def manifoldMinecraftVersionPreprocessorList = new ArrayList<String>()

    for (int i = 0; i < minecraftVersions.size(); i++) {
        String minecraftVersionManifold = minecraftVersions[i].replace(".", "_").replace("-", "_TO_MC_")

        if (minecraftVersionIndex == i) {
            manifoldMinecraftVersionPreprocessorList.add("MC_" + minecraftVersionManifold)
        } else {
            manifoldMinecraftVersionPreprocessorList.add("# MC_" + minecraftVersionManifold)
        }
    }

    StringBuilder sb = new StringBuilder()
    // Add a warning to the top of the build.properties file
    // The whitespace at the end is intentional
    sb.append("""# This file contains the Minecraft version Manifold uses.
# Please do not touch this file, as this is handled by the build script automatically.
# If you're updating the mod to a new Minecraft version, add a new version.properties file to the version_properties_folder

# suppress inspection "WrongPropertyKeyValueDelimiter" for whole file
# suppress inspection "UnusedProperty" for whole file

""")

    // Build the Minecraft version preprocessors list
    for (String manifoldMinecraftVersionPreprocessor : manifoldMinecraftVersionPreprocessorList) {
        sb.append(manifoldMinecraftVersionPreprocessor)
        sb.append("=\n")
    }

    // Write to build.properties
    new File(projectDir, "build.properties").text = sb.toString()
}

loadProperties()
writeManifoldPreprocessorDefinesToBuildProperties()

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    jcenter()
    maven {
        name = "SonaType"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${gradle.ext.minecraft_version}"
    mappings "net.fabricmc:yarn:${gradle.ext.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${gradle.ext.loader_version}"

    // Manifold
    implementation 'systems.manifold:manifold-rt:2023.1.26'
    annotationProcessor group: 'systems.manifold', name: 'manifold', version: '2023.1.26'
    annotationProcessor 'systems.manifold:manifold-preprocessor:2023.1.26'

    // Fabric API. This is technically optional, but you probably want it anyway.
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

targetCompatibility = targetJavaVersion
sourceCompatibility = targetJavaVersion

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // Manifold
    if (JavaVersion.current() != JavaVersion.VERSION_1_8 && sourceSets.main.allJava.files.any { it.name == "module-info.java" }) {
        tasks.withType(JavaCompile).tap {
            configureEach {
                // If you DO define a module-info.java file
                options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
            }
        }
    } else {
        tasks.withType(JavaCompile).tap {
            configureEach {
                // If you DO NOT define a module-info.java file
                options.compilerArgs += ['-Xplugin:Manifold']
            }
        }
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom {
    runs {
        clientOptimised {
            name "Client Extended Compat Optimised"

            dependencies {
                modRuntimeOnly "maven.modrinth:lazydfu:4SHylIO9"
            }

            client()
        }
    }
}
